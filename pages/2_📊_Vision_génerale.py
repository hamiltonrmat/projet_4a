import pandas as pd
import numpy as np
import os,sys,inspect
current_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir) 
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import plotly.express as px
from sklearn import preprocessing
import plotly.graph_objects as go
from sklearn.cluster import KMeans

st.set_page_config(page_title="Vision g√©nerale", initial_sidebar_state='auto', layout="wide")
st.title('Projet 4A - Traitement de donn√©es alimentaires')

### du code qui vient de notre notebook, ne fait pas partie de l'affichage
data = pd.read_csv('Agribalyse_Synthese (2).csv')
cols = list(data.columns)
data = data.rename(columns={cols[18]: "effets_toxico_non_cancer", cols[19]: "effets_toxico_cancer"})

## ici oui on l'affiche le dataset avec st
st.header("Les donn√©es AgriBalyse brutes")
st.write("Nous vous pr√©sentons ci-dessous la base de donn√©es compl√®te d'Agribalyse. Plus de **2500** produits la composent.")
st.dataframe(data)
st.write(data.shape)
cols_data, lignes_data = st.columns(2)
cols_data.metric("Produits", str(data.shape[0]))
lignes_data.metric("Param√®tres", str(data.shape[1]))
st.divider()


st.image("https://autrecuisine.fr/warehouse/cache/large/poster_5f733477321f3.jpg.png")


st.header('Qualit√© de la donn√©e - DQR')
st.write("√âtude du param√®tre de la variable DQR - Data Quality Ratio, elle √©value la fiabilit√© des donn√©es et pr√©conise une utilisation des donn√©es les plus fiables.")
st.caption("Plus cette valeur est basse plus la donn√©e est fiable.")
titres = ['mean', 'std', 'min', '25%', '50%', '75%', 'max']

desc = data.describe()


fig, ax = plt.subplots(figsize=(12, 6))
ax.bar(titres, desc['DQR'][1:].values)
ax.set_xlabel('Statistiques')
ax.set_ylabel('Valeurs')
ax.set_title('Diagramme en barres des statistiques descriptives de DQR')
st.pyplot(fig)
st.write("Cette figure nous donne un premier un aper√ßu sur la r√©partition du DQR. La m√©diane et la moyenne ont des valeurs similaires aux alentours de 3. On observe √©galement un √©cart-type assez faible ce qui nous indique que les donn√©es sont regroup√©es autour de la moyenne. ")
st.write("On peut analyser en d√©tail les statistiques via le tableau ci-dessous.")
st.dataframe(data.describe()['DQR'])
st.caption("On retrouve une moyenne ainsi qu'une m√©diane d'une valeure de 2,7. De plus, on peut observer un maximum de 4,87 et un minimum de 1,2 ce qui signifie une grande h√©t√©rog√©n√©it√© entre la qualit√© des produits de la base de donn√©es. ")
st.divider()

fig = px.box(data, x="DQR", title="Bo√Æte √† moustache de DQR")
st.plotly_chart(fig)
st.write("Cette bo√Æte √† moustache montre une fois de plus la distribution des valeurs de la colonne DQR.")

st.divider()
st.write("Selon la Commission Europ√©enne, il est conseill√© de prendre les produits alimentaires avec un DQR √©gale ou inf√©rieur √† 3 afin d'utiliser les donn√©es les plus fiables.")
st.write("Vous pouvez choisir la valeur de la qualit√© via le s√©lecteur ci-dessous.")
st.caption("√Ä noter que plus la valeur du DQR est faible, plus la donn√©e est fiable.")
dqr_value = st.select_slider('Qualit√© de la donn√©e',
    options=[1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5])
st.write('Donn√©s avec DQR plus petit que:', dqr_value)
st.caption("On remarque qu'en choisissant un DQR d'une valeur maximum de 3 on ne travaile plus que sur 1744 produits tandis que la base de donn√©es est compos√©e de 2518 produits.")

df = data[data["DQR"]<dqr_value]
st.dataframe(df)
st.write(df.shape)
lignes_df, cols_df= st.columns(2)
lignes_df.metric("Produits", str(df.shape[0]))
cols_df.metric("Param√®tres", str(df.shape[1]))
a = np.round(df.shape[0] / data.shape[0],3)*100
st.write("Pourcentage de produits gard√©s selon la qualit√© de la donn√©e choisie pr√©c√©demment (par rapport au total) :", a, " %")
st.divider()

variables = ['Changement climatique',
       "Appauvrissement de la couche d'ozone", "Rayonnements ionisants",
       "Formation photochimique d'ozone", "Particules fines",
       'effets_toxico_non_cancer', 'effets_toxico_cancer',
       'Acidification terrestre et eaux douces', 'Eutrophisation eaux douces',
       'Eutrophisation marine', 'Eutrophisation terrestre',
       "√âcotoxicit√© pour √©cosyst√®mes aquatiques d'eau douce",
       'Utilisation du sol', '√âpuisement des ressources eau',
       '√âpuisement des ressources √©nerg√©tiques',
       '√âpuisement des ressources min√©raux']



st.header('Les variables')
st.write("Nous vous proposons d√©sormais d'√©tudier les variables qui vous int√©ressent selon la qualit√© des donn√©es que vous avez pu s√©lectionner.")
variable_select = st.selectbox('Choisisez une variable', (i for i in variables))

confirm = st.checkbox('Afficher d√©tails')

if confirm:
    st.write(variable_select)
    col1, col2, col3 = st.columns(3)
    with col1:
        fig = px.histogram(df[variable_select], x=variable_select, nbins=10)
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        fig2 = px.box(df[variable_select], y=variable_select)
        st.plotly_chart(fig2, use_container_width=True)
    min_variable, max_variable, mean_variable = st.columns(3)
    min_variable.metric("Min", np.round(df[variable_select].min(), 3))
    max_variable.metric("Max", np.round(df[variable_select].max(), 3))
    mean_variable.metric("Moyenne", np.round(df[variable_select].mean(), 3))
st.divider()
st.write("**Nous vous laissons poursuivre avec la page 3 sur le Score Unique EF de la base de donn√©e ou revenir √† la page d'accueil avec les liens ci-dessous.**")
st.page_link("Homepage.py", label="Page d'accueil", icon="üè†")
st.page_link("pages/3_üìà_Score_unique_EF.py", label="Score Unique EF üìà", icon="3Ô∏è‚É£")

st.sidebar.title('√Ä propos')
st.sidebar.info('Cette application a √©t√© d√©velopp√©e par Margaux BOYER, Marion DE CACQUERAY, Jules LEFORT et Laure WATERHOUSE.')
